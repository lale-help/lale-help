= form_for [current_circle, @form] do |f|
  - if errors.present?
    .form-introduction.error
      p= t('error_correction')


  .field-row.single
    .field.required class=errors.css(:name)
      = f.label :name
      = f.text_field :name, placeholder: true
      = errors.message_for(:name)

  .field-row.single
    .field.required class=errors.css(:description)
      = f.label :description
      = f.text_area :description
      = errors.message_for(:description)

  .field-row
    .field.required class=errors.css(:volunteer_count_required)
      = f.label :volunteer_count_required
      = f.select :volunteer_count_required do
        = options_for_select(1..10, @form.volunteer_count_required)
      = errors.message_for(:volunteer_count_required)

    .field.required
      = f.label :duration
      = f.select :duration do
        = options_for_select(@form.duration_options)

  .field-row-3

    / select scheduling type

    .field-3
      = f.label :scheduling_type
      = f.select :scheduling_type do
        = options_for_select(@form.scheduling_type_options, @form.scheduling_type)
      = errors.message_for(:scheduling_type)

    / start date & time (hidden by default)

    .field-3.between-element class=errors.css(:start_date)
      = f.label :start_date
      = f.text_field :start_date_string, class: :xd_datepicker

    .field-3.between-element class=errors.css(:start_time)
      = f.label :start_time
      = f.text_field :start_time, class: :xd_timepicker, placeholder: t('.placeholder_optional')

    / end date & time (always visible)

    .field-3.required class=errors.css(:due_date)
      = f.label :date, class: 'at-element'
      = f.label :due_date, class: 'between-element'
      = f.text_field :due_date_string, class: :xd_datepicker

    .field-3 class=errors.css(:due_time)
      = f.label :time, class: 'at-element'
      = f.label :due_time, class: 'between-element'
      = f.text_field :due_time, class: :xd_timepicker, placeholder: t('.placeholder_optional')

  - if errors.present?
    .field-row.single
      .field
        - %i(start_date start_time due_date due_time).each do |field|
          - if errors.message_for(field).present?
            = errors.message_for(field)
            br

  .field-row

    .field.required class=errors.css(:primary_location)
      = f.label :primary_location
      = f.text_field :primary_location
      = errors.message_for(:primary_location)


  .field-row
    .field.required class=errors.css(:working_group)
      = f.label :working_group_id
      - unless @form.working_group_disabled?
        = f.collection_select :working_group_id, @form.available_working_groups, :id, :name, {}
        = errors.message_for(:working_group)
      - else
        = f.hidden_field :working_group_id
        = text_field_tag :disabled, @form.working_group.name, disabled: true

    .field.required class=errors.css(:organizer_id)
      = f.label :organizer_id
      = f.grouped_collection_select(:organizer_id, @form.available_working_groups, :users, :name, :id, :name)
      = errors.message_for(:organizer_id)


  - if feature_enabled?(:projects)
    .field-row
      .field
        = f.label :project
        - unless @form.project_disabled?
          = @form.project_select(f)
          = errors.message_for(:project_id)
        - else
          = f.hidden_field :project_id
          = text_field_tag :disabled, @form.project.name, disabled: true



  .submit-row
    = f.submit
    = link_to(t('task_edit.cancel'), :back)
    - if locals[:delete]
      = link_to t('delete'), [current_circle, current_task], class: 'button secondary-action', data: {:confirm => t('helpers.confirm.task.delete')}, :method => :delete
