= form_for [current_circle, @form] do |f|
  - if errors.present?
    .form-introduction.error
      p= t('error_correction')


  .field-row.single
    .field.required class=errors.css(:name)
      = f.label :name
      = errors.formatted_message_for(:name)
      = f.text_field :name, placeholder: true


  .field-row
    .field.required class=errors.css(:working_group)
      = f.label :working_group_id
      = errors.formatted_message_for(:working_group)
      = f.collection_select :working_group_id, @form.available_working_groups, :id, :name, {}, disabled: @form.available_working_groups_disabled?

    .field.required class=errors.css(:organizer_id)
      = f.label :organizer_id
      = errors.formatted_message_for(:organizer_id)
      = f.grouped_collection_select(:organizer_id, @form.available_working_groups, :users, :name, :id, :name)


  .field-row.single
    .field.required class=errors.css(:description)
      = f.label :description
      = errors.formatted_message_for(:description)
      = f.text_area :description


  .field-row
    .field.required class=errors.css(:volunteer_count_required)
      = f.label :volunteer_count_required
      = errors.formatted_message_for(:volunteer_count_required)
      = f.select :volunteer_count_required do
        = options_for_select(1..10, @form.volunteer_count_required)

    .field.required class=errors.css(:primary_location)
      = f.label :primary_location
      = errors.formatted_message_for(:primary_location)
      = f.text_field :primary_location


  .field-row
    .field.required class=errors.css(:due_date)
      = f.label :due_date
      = errors.formatted_message_for(:due_date)
      = f.text_field :due_date, type: :date, min: Time.now.strftime("%Y-%m-%d")

    .field.required class=errors.css(:duration)
      = f.label :duration
      = errors.formatted_message_for(:duration)
      = f.select :duration do
        = options_for_select(@form.duration_options, @form.duration)

  .field-row
    .field class=errors.css(:scheduled_time_type)
      = f.label :scheduled_time_type
      = errors.formatted_message_for(:scheduled_time_type)
      = f.select :scheduled_time_type do
        = options_for_select(@form.scheduled_time_type_options, @form.scheduled_time_type)

    .field.scheduled-time
      = f.label :scheduled_time_start
      = errors.formatted_message_for(:scheduled_time_start)
      = errors.formatted_message_for(:scheduled_time_end)
      span.start
        = f.select :scheduled_time_start, nil, {}, {class: 'timeselect'} do
          = options_for_select(@form.scheduled_time_options, @form.scheduled_time_start)
      span.end
        | to
        = f.select :scheduled_time_end, nil, {}, {class: 'timeselect'}
          = options_for_select(@form.scheduled_time_options, @form.scheduled_time_end)

  .submit-row
    = f.submit
    - cancel_path = @form.task.persisted? ? circle_task_path(current_circle, current_task) : circle_path(current_circle)
    = link_to t('task_edit.cancel'), cancel_path, class: 'button'
    - if locals[:delete]
      = link_to t('delete'), [current_circle, current_task], class: 'button secondary-action', data: {:confirm => t('helpers.confirm.task.delete')}, :method => :delete
